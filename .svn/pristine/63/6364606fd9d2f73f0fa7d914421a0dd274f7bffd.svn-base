package com.ams.assetmanage.maintenanceRecord.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ams.assetmanage.assetinf.entity.Assetinf;
import com.ams.assetmanage.assetinf.model.AssetinfModel;
import com.ams.assetmanage.assetinf.service.AssetinfService;
import com.ams.assetmanage.assetnam.entity.Assetnam;
import com.ams.assetmanage.assetnam.service.AssetnamService;
import com.ams.assetmanage.maintenanceRecord.entity.MaintenanceRecord;
import com.ams.assetmanage.maintenanceRecord.model.MaintenanceRecordModel;
import com.ams.assetmanage.maintenanceRecord.service.MaintenanceRecordService;
import com.core.action.BaseAction;
import com.core.model.OutputMessage;
import com.util.enums.PageSizeEnum;
import com.util.json.JackJsonUtils;
import com.util.page.Pager;
import com.util.page.PagerHelper;

/**
 * 资产维护记录控制器
 * 
 * @author JackH
 * 
 */
@Controller
public class MaintenanceRecordAction extends BaseAction {

	private static final long serialVersionUID = 6290317236056630565L;

	@Resource
	private MaintenanceRecordService maintenanceRecordService;
	@Resource
	private AssetinfService assetinfService;
	@Resource
	private AssetnamService assetnamService;

	/**
	 * 资产维护记录列表
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/toList")
	public String toList() {
		return MAINTENANCERECORD + "list";
	}

	/**
	 * 返回资产维护记录列表
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/list", produces = { "application/json;charset=UTF-8" })
	public @ResponseBody
	String list(MaintenanceRecordModel model, ModelMap map) {

		Pager page = PagerHelper.getInstance(this.request,
				PageSizeEnum.MIDDLE);
		List<MaintenanceRecordModel> maintenanceRecordList = maintenanceRecordService
				.findByCondition(model, page);
		map.addAttribute("maintenanceRecordList", maintenanceRecordList);

		page.setRows(maintenanceRecordList);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 打开弹出框内容
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/toPopList")
	public String toPopList(MaintenanceRecord model, ModelMap map) {
		map.addAttribute("model", model);
		return MAINTENANCERECORD + "maintenancerecordPop";
	}

	/**
	 * 弹出框局部刷新
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/popList", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String popList(MaintenanceRecordModel model) {
		Pager page = PagerHelper.getInstance(this.request,
				PageSizeEnum.MIDDLE);
		List<MaintenanceRecordModel> list = maintenanceRecordService
				.findByCondition(model, page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 检查当前资产维护记录是否存在
	 * 
	 * @param name
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/checkMaintenanceRecord", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String checkMaintenanceRecord(String name, String id) {
		boolean flag = false;
		flag = maintenanceRecordService.checkMaintenanceRecord(name, id);
		return String.valueOf(flag);
	}

	/**
	 * 保存按钮
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/save", produces = { "application/json;charset=UTF-8" })
	public @ResponseBody
	String save(MaintenanceRecord model) {
		OutputMessage msg = new OutputMessage();
		if (model != null) {
			if (StringUtils.isNotEmpty(model.getMaintenancerecordId())) {
				// 修改
				MaintenanceRecord maintenanceRecord = maintenanceRecordService
						.getById(model.getMaintenancerecordId());
				if (maintenanceRecord != null) {
					maintenanceRecordService.update(model);
					msg = setOutputMessage(true, "修改成功！msg from Action",
							model.getMaintenancerecordId());
				} else {
					msg = setOutputMessage(false,
							"该资产维护记录已经被删除！msg from Action",
							model.getMaintenancerecordId());
				}
			} else {
				// 保存
				if (maintenanceRecordService.save(model) != null) {
					msg = setOutputMessage(true, "新建成功！",
							model.getMaintenancerecordId());
				} else {
					msg = setOutputMessage(false, "新建失败！",
							model.getMaintenancerecordId());
				}

			}
		} else {
			msg = setOutputMessage(false, "数据为空 msg from Action", null);
		}
		String json = JackJsonUtils.toJSon(msg);
		return json;
	}

	/**
	 * 新增资产维护记录
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/add")
	public String add(ModelMap map) {
		// assetinfList
		List<AssetinfModel> assetinfList = assetinfService.findModelByCondition(
				new AssetinfModel(), null);
		map.addAttribute("assetinfList", assetinfList);

		// 日期
		// SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//
		// 设置日期格式
		// map.addAttribute("now_time", df.format(new Date()));
		return MAINTENANCERECORD + "edit";
	}

	/**
	 * 删除资产维护记录
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/delete", produces = { "application/json;charset=UTF-8" })
	public @ResponseBody
	String delete(String id) {
		OutputMessage msg = new OutputMessage();
		if (StringUtils.isNotEmpty(id)) {
			maintenanceRecordService.delete(id);
			msg = setOutputMessage(true, "删除成功！msg from Action", id);
		} else {
			msg = setOutputMessage(false, "删除失败，资产维护记录编号为空！msg from Action", id);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 修改资产维护记录
	 * 
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/edit")
	public String edit(String id, ModelMap map) {
		// assetinfList
		List<AssetinfModel> assetinfList = assetinfService.findModelByCondition(
				new AssetinfModel(), null);
		map.addAttribute("assetinfList", assetinfList);
		
		if (StringUtils.isNotEmpty(id)) {
			MaintenanceRecord model = maintenanceRecordService.getById(id);
			map.addAttribute("model", model);
			return MAINTENANCERECORD + "edit";
		} else {
			this.returnException("资产维护记录编号不存在，不能编辑！msg from Action");
		}
		return ERROR;
	}

	/**
	 * 查看资产维护记录
	 * 
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/maintenancerecord/detail")
	public String detail(String id, ModelMap map) {
		if (StringUtils.isNotEmpty(id)) {
			MaintenanceRecordModel model = maintenanceRecordService
					.getModelById(id);
			map.addAttribute("model", model);
			return MAINTENANCERECORD + "detail";
		} else {
			this.returnException("资产维护记录编号不存在，查看不了详细！msg from Action");
		}
		return ERROR;
	}

}
