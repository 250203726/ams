package com.ams.assetmanage.assetnam.action;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ams.assetmanage.assetnam.entity.Assetnam;
import com.ams.assetmanage.assetnam.service.AssetnamService;
import com.core.action.BaseAction;
import com.core.model.OutputMessage;
import com.util.enums.PageSizeEnum;
import com.util.json.JackJsonUtils;
import com.util.page.Pager;
import com.util.page.PagerHelper;

/**
 * 资产名称管理
 * 
 * @author 
 * @Data 
 * 
 */
@Controller
public class AssetnamAction extends BaseAction {

	private static final long serialVersionUID = 96172069305589029L;

	@Resource
	private AssetnamService assetnamService;
	//@Resource
	//private CustomerService customerService;

	/**
	 * 跳转到新建页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/add")
	public String add() {
		return ASSETNAM + "edit"; // AMS/assetnam/edit.jsp
	}

	/**
	 * 保存
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/assetnam/save", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String save(Assetnam model) {
		OutputMessage msg = new OutputMessage();
		if (null != model) {
			if (StringUtils.isNotEmpty(model.getassetName())) {// 修改
				Assetnam assetnam = assetnamService.getById(model.getassetName());
				if (null != assetnam) {
					assetnamService.update(model);
					msg = setOutputMessage(true, "修改成功！", model.getassetName());
				} else {
					msg = setOutputMessage(false, "该资产名称已经被删除！",
							model.getassetName());
				}
			} else {// 保存
				if (checkAssetnam(model.getassetName(), null).equals("false")) {// 如果资产名不存在
					assetnamService.save(model);
					msg = setOutputMessage(true, "新建成功！", model.getassetName());
				} else {
					msg = setOutputMessage(false, "资产名已存在！",
							model.getassetName());
				}
			}
		} else {
			msg = setOutputMessage(false, "数据为空", null);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 跳转到编辑页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/edit")
	public String edit(String id, ModelMap map) {
		if (StringUtils.isNotEmpty(id)) {
			Assetnam model = assetnamService.getById(id);
			map.addAttribute("model", model);
			return ASSETNAM + "edit";
		} else {
			this.returnException("资产名称编号不存在，不能编辑！");
		}
		return ERROR;

	}

	/**
	 * 跳转到详细页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/detail")
	public String detail(String id, ModelMap map) {
		if (StringUtils.isNotEmpty(id)) {
			Assetnam model = assetnamService.getById(id);
			map.addAttribute("model", model);
			return ASSETNAM + "detail";
		} else {
			this.returnException("资产名称编号不存在，查看不了详细！");
		}
		return ERROR;
	}

	/**
	 * 物理删除资产名称信息
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetnam/delete", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String delete(String id) {
		OutputMessage msg = new OutputMessage();
		if (StringUtils.isNotEmpty(id)) {
			assetnamService.delete(id);
			msg = setOutputMessage(true, "操作成功！", id);
		} else {
			msg = setOutputMessage(false, "操作失败，资产名称Id为空！", id);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 跳转到列表页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/toList")
	public String toList() {
		return ASSETNAM + "list";
	}

	/**
	 * 局部刷新翻页
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/list", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String list(Assetnam model) {
		Pager page = PagerHelper.getInstance(this.getRequest(),
				PageSizeEnum.MIDDLE);
		List<Assetnam> list = assetnamService.findByCondition(model, page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 打开弹出框内容
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetnam/toPopList")
	public String toPopList(Assetnam model, ModelMap map) {
		map.addAttribute("model", model);
		return ASSETNAM + "assetnamPop";
	}

	/**
	 * 弹出框局部刷新
	 */
	@RequestMapping(value = "/assetnam/popList", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String popList(Assetnam model) {
		Pager page = PagerHelper.getInstance(this.getRequest(),
				PageSizeEnum.MIDDLE);
		List<Assetnam> list = assetnamService.findByCondition(model, page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 检查资产名是否存在
	 * 
	 * @param assetName
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetnam/checkAssetnam", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String checkAssetnam(String name, String id) {
		boolean flag = false;
		flag = assetnamService.checkAssetnam(name, id);
		return String.valueOf(flag);
	}

}
