package com.ams.system.action;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ams.infomanage.depart.entity.Depart;
import com.ams.infomanage.depart.service.DepartService;
import com.ams.system.entity.Role;
import com.ams.system.entity.User;
import com.ams.system.service.RoleService;
import com.ams.system.service.UserRoleService;
import com.ams.system.service.UserService;
import com.core.action.BaseAction;
import com.core.model.OutputMessage;
import com.util.json.JackJsonUtils;

/**
 * 用户角色
 * @author Wymann
 * @Date 2014-5-10 下午09:57:12
 *
 */
@Controller
@Scope("prototype")
public class UserRoleAction extends BaseAction{

	private static final long serialVersionUID = 5847394049948055840L;
	
	@Resource
	private RoleService roleService;
	
	@Resource
	private UserService userService;
	
	@Resource
	private UserRoleService userRoleService;
	
	@Resource
	private DepartService departService;

	/**
	 * 跳转到添加新用户界面
	 * @return
	 */
	@RequestMapping(value="/userRole/add")
	public String toAdd(ModelMap map){
		//1.departIdList
		List<Depart> departIdList=departService.findByCondition(new Depart(), null);		
		map.addAttribute("departIdList", departIdList);
		User user=new User();
		user.setPassword("123456");
		List<Role> allRole=roleService.findAll();
		map.addAttribute("allRole", allRole);
		map.addAttribute("user", user);
		return SYSTEM+"userRole";
	}
	
	/**
	 * 跳转到用户角色编辑页面
	 * @return
	 */
	@RequestMapping(value="/userRole/edit")
	public String toEdit(String id,ModelMap map){
		//1.departIdList
		List<Depart> departIdList=departService.findByCondition(new Depart(), null);		
		map.addAttribute("departIdList", departIdList);
		if(StringUtils.isNotEmpty(id)){
			User user=userService.getById(id);
			if(null!=user){
				List<Role> roleList=roleService.getByUserId(user.getUserId());
				String rList="";
				for(Role role:roleList){
					rList+=role.getRoleId()+",";
				}
				List<Role> allRole=roleService.findAll();
				map.addAttribute("user", user);
				map.addAttribute("rList", rList);
				map.addAttribute("allRole", allRole);
				return SYSTEM+"userRole";
			}
		}else{
			this.returnException("用户角色编码不存在，不能编辑！");
		}
		return ERROR;
	}
	
	/**
	 * 保存
	 */
	@RequestMapping(value="/userRole/save",produces="text/plain;charset=UTF-8")
	public @ResponseBody String save(User user,String role){
		OutputMessage msg=new OutputMessage();
		if(null!=user){
			if(StringUtils.isNotEmpty(user.getUserId())){//修改
				User model=userService.getById(user.getUserId());
				if(null!=model){
					userRoleService.update(user,role);
					msg=setOutputMessage(true, "修改成功！", user.getUserId());
				}else{
					msg=setOutputMessage(false, "该用户已经被删除！", user.getUserId());
				}
			}else{//保存
				if(checkUser(user.getUserName()).equals("false")){//如果用户不存在
					userRoleService.save(user,role);
					msg=setOutputMessage(true, "新建成功！", user.getUserId());
				}else{
					msg=setOutputMessage(false, "用户名已存在！", user.getUserId());
				}
			}
		}else{
			msg=setOutputMessage(false, "数据为空", null);
		}
		return JackJsonUtils.toJSon(msg);
	}
	
	/**
	 * 检查用户名是否存在
	 * @param userName
	 * @return
	 */
	@RequestMapping(value="/userRole/check")
	public @ResponseBody String checkUser(String userName){
		boolean flag=false;
		flag=userService.checkUser(userName);
		return String.valueOf(flag);
	}
}
