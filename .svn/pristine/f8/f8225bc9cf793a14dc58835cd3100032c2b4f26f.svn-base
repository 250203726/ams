package com.ams.assetmanage.assetdamage.action;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ams.assetmanage.assetdamage.entity.Assetdamage;
import com.ams.assetmanage.assetdamage.model.AssetdamageModel;
import com.ams.assetmanage.assetdamage.service.AssetdamageService;
import com.ams.assetmanage.assetinf.entity.Assetinf;
import com.ams.assetmanage.assetinf.model.AssetinfModel;
import com.ams.assetmanage.assetinf.service.AssetinfService;
import com.ams.assetmanage.assettype.service.AssettypeService;
import com.ams.system.entity.User;
import com.ams.system.model.UserModel;
import com.ams.system.service.UserService;
import com.core.action.BaseAction;
import com.core.model.OutputMessage;
import com.util.enums.PageSizeEnum;
import com.util.json.JackJsonUtils;
import com.util.page.Pager;
import com.util.page.PagerHelper;

/**
 * 资产报损
 * 
 * 
 */
@Controller
public class AssetdamageAction extends BaseAction {

	private static final long serialVersionUID = 96172069305589029L;

	@Resource
	private AssetdamageService assetdamageService;
	
	@Resource
	private AssetinfService assetinfService;
	
	@Resource
	private UserService userService;
	
	@Resource
	private AssettypeService assettypeService;
	
	/**
	 * 新增资产报损
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/add")
	public String add(ModelMap map) {
		//1.assetinfList
		/*List<Assetinf> assetinList=assetinfService.findByCondition(new Assetinf(),	null);
		map.addAttribute("assetinList", assetinList);
		*/		
		List<AssetinfModel> assetinfList = assetinfService.findModelByCondition(
				new AssetinfModel(), null);
		map.addAttribute("assetinfList", assetinfList);
		
		//2.userList
		//List<User> userList=userService.findByCondition(new UserModel(),	null);
		//map.addAttribute("userIdList", userList);
		
		return ASSETDAMAGE + "edit"; 
	}

	/**
	 * 保存按钮
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/save", produces = {"application/json;charset=UTF-8"})
	public @ResponseBody
	String save(Assetdamage model) {
		OutputMessage msg = new OutputMessage();
		if (null != model) {
			if (StringUtils.isNotEmpty(model.getAssetDamageID())) {
				// 修改
				Assetdamage assetdamage = assetdamageService.getById(model.getAssetDamageID());
				if (null != assetdamage) {
					assetdamageService.update(model);
					msg = setOutputMessage(true, "修改成功！", model.getAssetDamageID());
				} else {
					msg = setOutputMessage(false, "该资产报损ID已经被删除！",
							model.getAssetDamageID());
				}
			} else {
				//保存
				if(assetdamageService.save(model)!=null){
					msg = setOutputMessage(true, "新建成功！", model.getAssetDamageID());
				}else {
					msg = setOutputMessage(false, "新建失败！", model.getAssetDamageID());
				}
			}
		} else {
			msg = setOutputMessage(false, "数据为空 msg from Action", null);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 修改资产报损
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/edit")
	public String edit(String id, ModelMap map) {
		//1.assetinfList
		/*List<Assetinf> assetinList=assetinfService.findByCondition(new Assetinf(),	null);
		map.addAttribute("assetinList", assetinList);*/
		List<AssetinfModel> assetinfList = assetinfService.findModelByCondition(
				new AssetinfModel(), null);
		map.addAttribute("assetinfList", assetinfList);
		
		//2.userList
		//List<User> userList=userService.findByCondition(new UserModel(),	null);
		//map.addAttribute("userList", userList);
		
		if (StringUtils.isNotEmpty(id)) {
			Assetdamage model = assetdamageService.getById(id);
			map.addAttribute("model", model);
			return ASSETDAMAGE + "edit";
		} else {
			this.returnException("资产报损不存在，不能编辑！");
		}
		return ERROR;

	}

	/**
	 * 查看资产报损
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/detail")
	public String detail(String id, ModelMap map) {
		if (StringUtils.isNotEmpty(id)) {
			AssetdamageModel model = assetdamageService.getModelById(id);
			map.addAttribute("model", model);
			return ASSETDAMAGE + "detail";
		} else {
			this.returnException("资产类别编号不存在，查看不了详细！");
		}
		return ERROR;
	}

	/**
	 * 删除资产报损
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/delete", produces = {"application/json;charset=UTF-8"})
	public @ResponseBody
	String delete(String id) {
		OutputMessage msg = new OutputMessage();
		if (StringUtils.isNotEmpty(id)) {
			assetdamageService.delete(id);
			msg = setOutputMessage(true, "操作成功！", id);
		} else {
			msg = setOutputMessage(false, "操作失败，资产类别为空！", id);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 资产报损列表
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/toList")
	public String toList() {
		return ASSETDAMAGE + "list";
	}

	/**
	 * 返回资产报损列表
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/list", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String list(AssetdamageModel model) {
		Pager page = PagerHelper.getInstance(this.request,
				PageSizeEnum.MIDDLE);
		List<AssetdamageModel> list = assetdamageService.findByCondition(model, page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 打开弹出框内容
	 * 
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/toPopList")
	public String toPopList(Assetdamage model, ModelMap map) {
		map.addAttribute("model", model);
		return ASSETDAMAGE + "assetclaPop";
	}

	/**
	 * 弹出框局部刷新
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/popList", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String popList(AssetdamageModel model) {
		Pager page = PagerHelper.getInstance(this.request,
				PageSizeEnum.MIDDLE);
		List<AssetdamageModel> list = assetdamageService.findByCondition(model, page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}

	/**
	 * 检查资产报损是否存在
	 * 
	 * @param name
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/assetmanage/assetdamage/checkAssetdamage", produces = "text/plain;charset=UTF-8")
	public @ResponseBody
	String checkAssetdamage(String name, String id) {
		boolean flag = false;
		flag = assetdamageService.checkAssetdamage(name, id);
		return String.valueOf(flag);
	}
}

