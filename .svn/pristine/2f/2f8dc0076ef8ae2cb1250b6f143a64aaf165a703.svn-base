package com.ams.infomanage.supplier.action;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ams.company.entity.Company;
import com.ams.company.model.CompanyModel;
import com.ams.company.service.CompanyService;
import com.ams.customer.service.CustomerService;
import com.ams.infomanage.supplier.entity.Supplier;
import com.ams.infomanage.supplier.model.SupplierModel;
import com.ams.infomanage.supplier.service.SupplierService;
import com.core.action.BaseAction;
import com.core.model.OutputMessage;
import com.util.enums.PageSizeEnum;
import com.util.json.JackJsonUtils;
import com.util.page.Pager;
import com.util.page.PagerHelper;

/**
 * 	供应商Supplier
 *	@author simon
 */
@Controller
public class SupplierAction extends BaseAction{

	/**
	 * 
	 */
	private static final long serialVersionUID = -9043863563506939011L;
	@Resource
	private SupplierService SupplierService;
	/**
	 * 跳转到新建页面
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/add")
	public String add(){
		return SUPPLIER+"edit";
	}
	
	/**
	 * 保存
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/save",produces="text/plain;charset=UTF-8")
	public @ResponseBody String save(Supplier model){
		OutputMessage msg=new OutputMessage();
		if(null!=model){
			if(StringUtils.isNotEmpty(model.getSupplierId())){//修改
				Supplier Supplier=SupplierService.getById(model.getSupplierId());
				if(null!=Supplier){
					SupplierService.update(model);
					msg=setOutputMessage(true, "修改成功！", model.getSupplierId());
				}else{
					msg=setOutputMessage(false, "该供应商已经被删除！", model.getSupplierId());
				}
			}else{//保存
				if(checkSupplier(model.getSupplierName(),null).equals("false")){//如果供应商不存在
					SupplierService.save(model);
					msg=setOutputMessage(true, "新建成功！", model.getSupplierId());
				}else{
					msg=setOutputMessage(false, "供应商名已存在！", model.getSupplierId());
				}
				
			}
		}else{
			msg=setOutputMessage(false, "数据为空", null);
		}
		return JackJsonUtils.toJSon(msg);
	}

	/**
	 * 跳转到编辑页面
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/edit")
	public String edit(String id,ModelMap map){
		if(StringUtils.isNotEmpty(id)){
			Supplier model=SupplierService.getById(id);
			map.addAttribute("model", model);
			return SUPPLIER+"edit";
		}else{
			this.returnException("供应商编号不存在，不能编辑！");
		}
		return ERROR;
		
	}
	
	/**
	 * 跳转到详细页面
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/detail")
	public String detail(String id,ModelMap map){
		if(StringUtils.isNotEmpty(id)){
			Supplier model=SupplierService.getById(id);
			map.addAttribute("model", model);
			return SUPPLIER+"detail";
		}else{
			this.returnException("供应商编号不存在，查看不了详细！");
		}
		return ERROR;
	}
	
	/**
	 * 物理删除厂商信息
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/delete",produces="text/plain;charset=UTF-8")
	public @ResponseBody String delete(String id){
		OutputMessage msg=new OutputMessage();
		if(StringUtils.isNotEmpty(id)){
			SupplierService.delete(id);
			msg=setOutputMessage(true, "操作成功！", id);
		}else{
			msg=setOutputMessage(false, "操作失败，供应商编号为空！", id);
		}
		return JackJsonUtils.toJSon(msg);
	}
	
	/**
	 * 跳转到列表页面
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/toList")
	public String toList(){
		return SUPPLIER+"list";
	}
	
	/**
	 * 局部刷新翻页
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/list",produces="text/plain;charset=UTF-8")
	public @ResponseBody String list(Supplier model){
		Pager page=PagerHelper.getInstance(this.getRequest(), PageSizeEnum.MIDDLE);
		List<Supplier> list=SupplierService.findByCondition(model,page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}
	
	/**
	 * 打开弹出框内容
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/toPopList")
	public String toPopList(SupplierModel model,ModelMap map){
		map.addAttribute("model", model);
		return DEPART+"SupplierPop";
	}
	
	/**
	 * 弹出框局部刷新
	 */
	@RequestMapping(value="/infomanage/supplier/popList",produces="text/plain;charset=UTF-8")
	public @ResponseBody String popList(Supplier model){
		Pager page=PagerHelper.getInstance(this.getRequest(), PageSizeEnum.MIDDLE);
		List<Supplier> list=SupplierService.findByCondition(model,page);
		page.setRows(list);
		return JackJsonUtils.toJSon(page);
	}
	
	/**
	 * 检查供应商名是否存在
	 * @param name
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/infomanage/supplier/checkSupplier",produces="text/plain;charset=UTF-8")
	public @ResponseBody String checkSupplier(String name, String id) {
		boolean flag=false;
		flag=SupplierService.checkSupplier(name, id);
		return String.valueOf(flag);
	}
	
}
