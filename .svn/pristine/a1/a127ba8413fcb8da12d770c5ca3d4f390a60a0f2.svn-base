<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
       ">
    <!-- 引入hibernate和数据源数据 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:cfg/jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    <!-- c3p0数据连接池 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${connection.driver_class}" />
		<property name="jdbcUrl" value="${connection.url}" />
		<property name="user" value="${connection.username}" />
		<property name="password" value="${connection.password}" />
		
        <property name="minPoolSize" value="${proxool.minimum.size}" />
        <property name="maxPoolSize" value="${proxool.maximum.size}" />
        <property name="initialPoolSize" value="${proxool.initial.size}" />
        <property name="maxIdleTime" value="${proxool.maxIdle.time}" />
        <property name="acquireIncrement" value="${proxool.acquire.increment}" />
        <property name="maxStatements" value="${proxool.max.statement}" />
        <property name="idleConnectionTestPeriod" value="${proxool.test.period}" />
        <property name="acquireRetryAttempts" value="${proxool.retry.attempts}" />
        <property name="breakAfterAcquireFailure" value="${proxool.acquire.failure}" />
        <property name="testConnectionOnCheckout" value="${proxool.validate}" />
	</bean>

	<!-- 当连接不通数据源时，可以定义多个 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect" >${hibernate.dialect}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>  
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
		<!--当然也可以不使用上面这种指定的方式，而使用包扫描的方式做为替换，推荐这种mappingDirectoryLocations  packagesToScan-->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath*:com/ams/baseData/entity</value>
				<value>classpath*:com/ams/company/entity</value>
				<value>classpath*:com/ams/customer/entity</value>
				<value>classpath*:com/ams/system/entity</value>
				<value>classpath*:com/ams/infomanage/depart/entity</value>
				<value>classpath*:com/ams/infomanage/project/entity</value>
				<value>classpath*:com/ams/assetmanage/assetcla/entity</value>
				<value>classpath*:com/ams/assetmanage/assetinf/entity</value>
				<value>classpath*:com/ams/assetmanage/assetnam/entity</value>
				<value>classpath*:com/ams/infomanage/factory/entity</value>
				<value>classpath*:com/ams/infomanage/supplier/entity</value>
				<value>classpath*:com/ams/infomanage/maintenanceinfo/entity</value>
				<value>classpath*:com/ams/assetmanage/assetchange/entity</value>
			</list>
		</property>
	</bean>

	<!-- spring访问数据库模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		abstract="false" lazy-init="false" autowire="default">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 配置事务管理器 start -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- SPRING公共读取bean -->              
	<bean id="springBeanLocator" class="com.util.spring.SpringBeanLocator"/> 
	<!-- 配置事务管理器 end -->
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
	   <tx:attributes>
	       <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED" />
			<tx:method name="audit*" propagation="REQUIRED" />
			<tx:method name="check*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
	    </tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
	    <!-- 对htgl中service层实施事务 -->
	    <aop:pointcut id="amsPointcut" expression="execution(* com.ams..service..*.*(..))"/>
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="amsPointcut"/>
	</aop:config>
	
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="txManager"/>
  	
  	<!-- 通过exclude-filter 把所有 @Controller注解的表现层控制器组件排除 ,多个包用都好隔开或从新定义一个 -->
  	<!-- 不扫描带有@Controller注解的类。因为这些类已经随容器启动时，在sp_servlet.xml中扫描过一遍了 --> 
	<context:component-scan base-package="com.core" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:component-scan base-package="com.ams" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 缓存配置 -->  
    <!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->  
    <cache:annotation-driven cache-manager="cacheManager"/>  
    <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->  
    <!--   
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">  
        <property name="caches">  
            <set>  
                <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>  
            </set>  
        </property>  
    </bean>  
     -->  
    <!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->  
    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->  
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:cfg/ehcache.xml"/>  
    </bean>  
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
        <property name="cacheManager" ref="cacheManagerFactory"/>  
    </bean> 
    
</beans>